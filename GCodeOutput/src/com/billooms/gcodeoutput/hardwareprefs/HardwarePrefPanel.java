package com.billooms.gcodeoutput.hardwareprefs;

import java.io.File;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.util.NbPreferences;

/**
 * Preference panel for setting hardware information
 *
 * @author Bill Ooms. Copyright 2015 Studio of Bill Ooms. All rights reserved.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
final class HardwarePrefPanel extends JPanel {

  /** File Extension used */
  public final static String EXTENSION = "ngc";

  private final HardwareOptionsPanelController controller;

  HardwarePrefPanel(HardwareOptionsPanelController controller) {
    this.controller = controller;
    initComponents();
    // TODO listen to changes in form fields and call controller.changed()
  }

  /** This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    XZPanel = new javax.swing.JPanel();
    xzStepperCombo = new javax.swing.JComboBox();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    xzMicroCombo = new javax.swing.JComboBox();
    jLabel3 = new javax.swing.JLabel();
    tpiField = new javax.swing.JFormattedTextField();
    SpindlePanel = new javax.swing.JPanel();
    largeField = new javax.swing.JFormattedTextField();
    stepperCombo = new javax.swing.JComboBox();
    jLabel5 = new javax.swing.JLabel();
    smallField = new javax.swing.JFormattedTextField();
    jLabel6 = new javax.swing.JLabel();
    jLabel7 = new javax.swing.JLabel();
    jLabel8 = new javax.swing.JLabel();
    microCombo = new javax.swing.JComboBox();
    GCodePanel = new javax.swing.JPanel();
    sameAsXMLCheck = new javax.swing.JCheckBox();
    browseButton = new javax.swing.JButton();
    filePathLabel = new javax.swing.JLabel();
    jLabel4 = new javax.swing.JLabel();
    jLabel10 = new javax.swing.JLabel();
    maxGField = new javax.swing.JFormattedTextField();
    IPPanel = new javax.swing.JPanel();
    emcCheck = new javax.swing.JCheckBox();
    jLabel9 = new javax.swing.JLabel();
    ipTextField1 = new javax.swing.JFormattedTextField();

    XZPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(HardwarePrefPanel.class, "HardwarePrefPanel.XZPanel.border.title"))); // NOI18N

    xzStepperCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1.8 degree (200 steps)", "0.9 degree (400 steps)" }));

    org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(HardwarePrefPanel.class, "HardwarePrefPanel.jLabel1.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(HardwarePrefPanel.class, "HardwarePrefPanel.jLabel2.text")); // NOI18N

    xzMicroCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1 step", "1/2 step", "1/4 step", "1/8 step", "1/10 step", "1/16 step" }));

    org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(HardwarePrefPanel.class, "HardwarePrefPanel.jLabel3.text")); // NOI18N

    tpiField.setColumns(5);
    tpiField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
    tpiField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    tpiField.setText(org.openide.util.NbBundle.getMessage(HardwarePrefPanel.class, "HardwarePrefPanel.tpiField.text")); // NOI18N
    tpiField.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);

    javax.swing.GroupLayout XZPanelLayout = new javax.swing.GroupLayout(XZPanel);
    XZPanel.setLayout(XZPanelLayout);
    XZPanelLayout.setHorizontalGroup(
      XZPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(XZPanelLayout.createSequentialGroup()
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(xzStepperCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
      .addGroup(XZPanelLayout.createSequentialGroup()
        .addGroup(XZPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel2)
          .addComponent(jLabel3))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(XZPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(tpiField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(xzMicroCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
    );
    XZPanelLayout.setVerticalGroup(
      XZPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(XZPanelLayout.createSequentialGroup()
        .addGroup(XZPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(xzStepperCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(XZPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel2)
          .addComponent(xzMicroCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(XZPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(tpiField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
    );

    SpindlePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(HardwarePrefPanel.class, "HardwarePrefPanel.SpindlePanel.border.title"))); // NOI18N

    largeField.setColumns(3);
    largeField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
    largeField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    largeField.setText(org.openide.util.NbBundle.getMessage(HardwarePrefPanel.class, "HardwarePrefPanel.largeField.text")); // NOI18N
    largeField.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);

    stepperCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1.8 degree (200 steps)", "0.9 degree (400 steps)" }));

    org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(HardwarePrefPanel.class, "HardwarePrefPanel.jLabel5.text")); // NOI18N

    smallField.setColumns(3);
    smallField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
    smallField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    smallField.setText(org.openide.util.NbBundle.getMessage(HardwarePrefPanel.class, "HardwarePrefPanel.smallField.text")); // NOI18N
    smallField.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);

    org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(HardwarePrefPanel.class, "HardwarePrefPanel.jLabel6.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(HardwarePrefPanel.class, "HardwarePrefPanel.jLabel7.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(HardwarePrefPanel.class, "HardwarePrefPanel.jLabel8.text")); // NOI18N

    microCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1 step", "1/2 step", "1/4 step", "1/8 step", "1/10 step", "1/16 step" }));

    javax.swing.GroupLayout SpindlePanelLayout = new javax.swing.GroupLayout(SpindlePanel);
    SpindlePanel.setLayout(SpindlePanelLayout);
    SpindlePanelLayout.setHorizontalGroup(
      SpindlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(SpindlePanelLayout.createSequentialGroup()
        .addComponent(jLabel5)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(stepperCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
      .addGroup(SpindlePanelLayout.createSequentialGroup()
        .addComponent(jLabel7)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(microCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
      .addGroup(SpindlePanelLayout.createSequentialGroup()
        .addComponent(jLabel6)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(smallField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
      .addGroup(SpindlePanelLayout.createSequentialGroup()
        .addComponent(jLabel8)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(largeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    );
    SpindlePanelLayout.setVerticalGroup(
      SpindlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(SpindlePanelLayout.createSequentialGroup()
        .addGroup(SpindlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel5)
          .addComponent(stepperCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(SpindlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel7)
          .addComponent(microCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(SpindlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel6)
          .addComponent(smallField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(SpindlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel8)
          .addComponent(largeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
    );

    GCodePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(HardwarePrefPanel.class, "HardwarePrefPanel.GCodePanel.border.title"))); // NOI18N

    sameAsXMLCheck.setSelected(true);
    org.openide.awt.Mnemonics.setLocalizedText(sameAsXMLCheck, org.openide.util.NbBundle.getMessage(HardwarePrefPanel.class, "HardwarePrefPanel.sameAsXMLCheck.text")); // NOI18N
    sameAsXMLCheck.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        gSameChanged(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(browseButton, org.openide.util.NbBundle.getMessage(HardwarePrefPanel.class, "HardwarePrefPanel.browseButton.text")); // NOI18N
    browseButton.setEnabled(false);
    browseButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        browseFile(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(filePathLabel, org.openide.util.NbBundle.getMessage(HardwarePrefPanel.class, "HardwarePrefPanel.filePathLabel.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(HardwarePrefPanel.class, "HardwarePrefPanel.jLabel4.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel10, org.openide.util.NbBundle.getMessage(HardwarePrefPanel.class, "HardwarePrefPanel.jLabel10.text")); // NOI18N

    maxGField.setColumns(3);
    maxGField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
    maxGField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    maxGField.setText(org.openide.util.NbBundle.getMessage(HardwarePrefPanel.class, "HardwarePrefPanel.maxGField.text")); // NOI18N
    maxGField.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);

    javax.swing.GroupLayout GCodePanelLayout = new javax.swing.GroupLayout(GCodePanel);
    GCodePanel.setLayout(GCodePanelLayout);
    GCodePanelLayout.setHorizontalGroup(
      GCodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(GCodePanelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(GCodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(sameAsXMLCheck)
          .addGroup(GCodePanelLayout.createSequentialGroup()
            .addComponent(browseButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(filePathLabel))
          .addGroup(GCodePanelLayout.createSequentialGroup()
            .addGap(6, 6, 6)
            .addGroup(GCodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(GCodePanelLayout.createSequentialGroup()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maxGField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
              .addComponent(jLabel4))))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    GCodePanelLayout.setVerticalGroup(
      GCodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(GCodePanelLayout.createSequentialGroup()
        .addComponent(sameAsXMLCheck)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(GCodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(browseButton)
          .addComponent(filePathLabel))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabel4)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(GCodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel10)
          .addComponent(maxGField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
    );

    IPPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(HardwarePrefPanel.class, "HardwarePrefPanel.IPPanel.border.title"))); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(emcCheck, org.openide.util.NbBundle.getMessage(HardwarePrefPanel.class, "HardwarePrefPanel.emcCheck.text")); // NOI18N
    emcCheck.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        emcCheckActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(HardwarePrefPanel.class, "HardwarePrefPanel.jLabel9.text")); // NOI18N

    try {
      ipTextField1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###.###")));
    } catch (java.text.ParseException ex) {
      ex.printStackTrace();
    }
    ipTextField1.setText(org.openide.util.NbBundle.getMessage(HardwarePrefPanel.class, "HardwarePrefPanel.ipTextField1.text_1")); // NOI18N

    javax.swing.GroupLayout IPPanelLayout = new javax.swing.GroupLayout(IPPanel);
    IPPanel.setLayout(IPPanelLayout);
    IPPanelLayout.setHorizontalGroup(
      IPPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(IPPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(IPPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(emcCheck)
          .addGroup(IPPanelLayout.createSequentialGroup()
            .addComponent(jLabel9)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(ipTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    IPPanelLayout.setVerticalGroup(
      IPPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(IPPanelLayout.createSequentialGroup()
        .addComponent(emcCheck)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(IPPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel9)
          .addComponent(ipTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(SpindlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(XZPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(GCodePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(IPPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(SpindlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(XZPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(layout.createSequentialGroup()
            .addComponent(GCodePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(IPPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

	private void gSameChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gSameChanged
      browseButton.setEnabled(!sameAsXMLCheck.isSelected());
	}//GEN-LAST:event_gSameChanged

	private void browseFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseFile
      File home = new File(System.getProperty("user.home"));	//The default dir to use if no value is stored
      File file = new FileChooserBuilder("gfile") // "gfile" is key for NbPreferences
          .setTitle("Save g-code file as...")
          .setDefaultWorkingDirectory(home)
          .setApproveText("Save")
          .setFileFilter(new FileNameExtensionFilter(EXTENSION + " files", EXTENSION))
          .showSaveDialog();
      if (file == null) {
        filePathLabel.setText("");
      } else {
        if (!(file.toString()).endsWith("." + EXTENSION)) {
          file = new File(file.toString() + "." + EXTENSION);
        }
        filePathLabel.setText(file.getAbsolutePath());
      }
	}//GEN-LAST:event_browseFile

	private void emcCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emcCheckActionPerformed
      ipTextField1.setEnabled(emcCheck.isSelected());
	}//GEN-LAST:event_emcCheckActionPerformed

  void load() {
    stepperCombo.setSelectedIndex(NbPreferences.forModule(HardwarePrefPanel.class).getInt("stepper", 0));
    microCombo.setSelectedIndex(NbPreferences.forModule(HardwarePrefPanel.class).getInt("micro", 1));
    smallField.setValue(NbPreferences.forModule(HardwarePrefPanel.class).getInt("smallGear", 20));
    largeField.setValue(NbPreferences.forModule(HardwarePrefPanel.class).getInt("largeGear", 130));

    xzStepperCombo.setSelectedIndex(NbPreferences.forModule(HardwarePrefPanel.class).getInt("XZStepper", 0));
    xzMicroCombo.setSelectedIndex(NbPreferences.forModule(HardwarePrefPanel.class).getInt("XZMicro", 1));
    tpiField.setValue(NbPreferences.forModule(HardwarePrefPanel.class).getInt("tpi", 10));

    sameAsXMLCheck.setSelected(NbPreferences.forModule(HardwarePrefPanel.class).getBoolean("gSame", true));
    filePathLabel.setText(NbPreferences.forModule(HardwarePrefPanel.class).get("gpath", ""));
    browseButton.setEnabled(!sameAsXMLCheck.isSelected());
    maxGField.setValue(NbPreferences.forModule(HardwarePrefPanel.class).getInt("maxG", 100));

    emcCheck.setSelected(NbPreferences.forModule(HardwarePrefPanel.class).getBoolean("emc", false));
    ipTextField1.setText(NbPreferences.forModule(HardwarePrefPanel.class).get("ip", "127.000.000.001"));
    ipTextField1.setEnabled(emcCheck.isSelected());
  }

  void store() {
    NbPreferences.forModule(HardwarePrefPanel.class).putInt("stepper", stepperCombo.getSelectedIndex());
    NbPreferences.forModule(HardwarePrefPanel.class).putInt("micro", microCombo.getSelectedIndex());
    NbPreferences.forModule(HardwarePrefPanel.class).putInt("smallGear", ((Number) smallField.getValue()).intValue());
    NbPreferences.forModule(HardwarePrefPanel.class).putInt("largeGear", ((Number) largeField.getValue()).intValue());

    NbPreferences.forModule(HardwarePrefPanel.class).putInt("XZStepper", xzStepperCombo.getSelectedIndex());
    NbPreferences.forModule(HardwarePrefPanel.class).putInt("XZMicro", xzMicroCombo.getSelectedIndex());
    NbPreferences.forModule(HardwarePrefPanel.class).putInt("tpi", ((Number) tpiField.getValue()).intValue());

    NbPreferences.forModule(HardwarePrefPanel.class).putBoolean("gSame", sameAsXMLCheck.isSelected());
    NbPreferences.forModule(HardwarePrefPanel.class).put("gpath", filePathLabel.getText());
    browseButton.setEnabled(!sameAsXMLCheck.isSelected());
    NbPreferences.forModule(HardwarePrefPanel.class).putInt("maxG", ((Number) maxGField.getValue()).intValue());

    NbPreferences.forModule(HardwarePrefPanel.class).putBoolean("emc", emcCheck.isSelected());
    NbPreferences.forModule(HardwarePrefPanel.class).put("ip", ipTextField1.getText());
    ipTextField1.setEnabled(emcCheck.isSelected());
  }

  boolean valid() {
    if (((Number) smallField.getValue()).intValue() < 10) {
      return false;
    }
    if (((Number) largeField.getValue()).intValue() < 10) {
      return false;
    }
    if (((Number) tpiField.getValue()).intValue() < 2) {
      return false;
    }
    return true;
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel GCodePanel;
  private javax.swing.JPanel IPPanel;
  private javax.swing.JPanel SpindlePanel;
  private javax.swing.JPanel XZPanel;
  private javax.swing.JButton browseButton;
  private javax.swing.JCheckBox emcCheck;
  private javax.swing.JLabel filePathLabel;
  private javax.swing.JFormattedTextField ipTextField1;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel10;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JLabel jLabel8;
  private javax.swing.JLabel jLabel9;
  private javax.swing.JFormattedTextField largeField;
  private javax.swing.JFormattedTextField maxGField;
  private javax.swing.JComboBox microCombo;
  private javax.swing.JCheckBox sameAsXMLCheck;
  private javax.swing.JFormattedTextField smallField;
  private javax.swing.JComboBox stepperCombo;
  private javax.swing.JFormattedTextField tpiField;
  private javax.swing.JComboBox xzMicroCombo;
  private javax.swing.JComboBox xzStepperCombo;
  // End of variables declaration//GEN-END:variables
}
