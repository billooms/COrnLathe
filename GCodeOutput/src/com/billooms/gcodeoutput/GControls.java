package com.billooms.gcodeoutput;

import com.billooms.controls.CoarseFine;
import com.billooms.controls.Controls;
import com.billooms.controls.CutCurve;
import com.billooms.controls.Threads;
import java.awt.Color;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.JPanel;

/**
 * Controls needed for generating g-code.
 *
 * @author Bill Ooms. Copyright 2015 Studio of Bill Ooms. All rights reserved.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
public class GControls extends JPanel implements PropertyChangeListener {

  private Controls controls = null;

  /** Creates new form GControls */
  public GControls() {
    initComponents();

    // everything disabled at first
    feedPanel.setEnabled(false);
    cfPanel.setEnabled(false);
    cutCurvePanel.setEnabled(false);
    threadPanel.setEnabled(false);

//	linuxCNCPanel.initialize();	// can't do this in the constructor
  }

  /**
   * Set the Controls object for this panel.
   *
   * @param newControls new Controls object
   */
  public void setControls(Controls newControls) {
    if (controls == newControls) {
      return;
    }
    if (controls != null) {
      controls.removePropertyChangeListener(this);  // quit listening to the old one
    }
    this.controls = newControls;
    notifyChange(true); // Always flag the button when loading or re-loading a new Controls object
    updateAll();
    if (controls != null) {
      controls.addPropertyChangeListener(this);
    }
  }

  /**
   * Update all the sub-panels.
   */
  private void updateAll() {
    if (controls != null) {
      feedPanel.setFeedRate(controls.getFeedRate());
      switch (controls.getKind()) {
        case NORMAL:
          cfPanel.setCoarseFine((CoarseFine) controls.getActive());
          cutCurvePanel.setCutCurve(null);
          threadPanel.setThreads(null);
          cutRosetteButton.setSelected(true);
          break;
        case OUTLINE:
          cfPanel.setCoarseFine(null);
          cutCurvePanel.setCutCurve((CutCurve) controls.getActive());
          threadPanel.setThreads(null);
          cutCurveButton.setSelected(true);
          break;
        case THREADS:
          cfPanel.setCoarseFine(null);
          cutCurvePanel.setCutCurve(null);
          threadPanel.setThreads((Threads) controls.getActive());
          threadsButton.setSelected(true);
          break;
      }
    } else {
      feedPanel.setFeedRate(null);
      cfPanel.setCoarseFine(null);
      cutCurvePanel.setCutCurve(null);
      threadPanel.setThreads(null);
    }

  }

  @Override
  public void propertyChange(PropertyChangeEvent evt) {
//    System.out.println("GControls.propertyChange: " + evt.getPropertyName() + " " + evt.getOldValue() + " " + evt.getNewValue());

    // Listen for changes in the active control which may come from external sources (DataNavigator).
    if (evt.getPropertyName().equals(Controls.PROP_ACTIVE)) {
      updateAll();
    }
  }

  /**
   * Notify the control panel that something has changed, or that the changes
   * are to be reset.
   *
   * @param change true=note the change, false=reset the writeGButton
   */
  public void notifyChange(boolean change) {
    if (change) {
      writeGButton.setForeground(Color.RED);
    } else {
      writeGButton.setForeground(Color.BLACK);
    }
  }

  /** This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    controlButtons = new javax.swing.ButtonGroup();
    writeGButton = new javax.swing.JButton();
    cutRosetteButton = new javax.swing.JRadioButton();
    cutCurveButton = new javax.swing.JRadioButton();
    threadsButton = new javax.swing.JRadioButton();
    feedPanel = new com.billooms.gcodeoutput.FeedRatePanel();
    cfPanel = new com.billooms.gcodeoutput.CoarseFinePanel();
    linuxCNCPanel = new com.billooms.gcodeoutput.LinuxCNCPanel();
    cutCurvePanel = new com.billooms.gcodeoutput.CutCurvePanel();
    threadPanel = new com.billooms.gcodeoutput.ThreadPanel();

    setBackground(new java.awt.Color(204, 204, 204));

    writeGButton.setText(org.openide.util.NbBundle.getMessage(GControls.class, "GControls.writeGButton.text")); // NOI18N
    writeGButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        writeG(evt);
      }
    });

    controlButtons.add(cutRosetteButton);
    cutRosetteButton.setSelected(true);
    cutRosetteButton.setText(org.openide.util.NbBundle.getMessage(GControls.class, "GControls.cutRosetteButton.text")); // NOI18N
    cutRosetteButton.setToolTipText(org.openide.util.NbBundle.getMessage(GControls.class, "GControls.cutRosetteButton.toolTipText")); // NOI18N
    cutRosetteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    cutRosetteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/billooms/gcodeoutput/icons/CutRosette.png"))); // NOI18N
    cutRosetteButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/billooms/gcodeoutput/icons/CutingRosette.png"))); // NOI18N
    cutRosetteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    cutRosetteButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cutRosetteAction(evt);
      }
    });

    controlButtons.add(cutCurveButton);
    cutCurveButton.setText(org.openide.util.NbBundle.getMessage(GControls.class, "GControls.cutCurveButton.text")); // NOI18N
    cutCurveButton.setToolTipText(org.openide.util.NbBundle.getMessage(GControls.class, "GControls.cutCurveButton.toolTipText")); // NOI18N
    cutCurveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    cutCurveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/billooms/gcodeoutput/icons/CutCurve.png"))); // NOI18N
    cutCurveButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/billooms/gcodeoutput/icons/CutingCurve.png"))); // NOI18N
    cutCurveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    cutCurveButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cutCurveAction(evt);
      }
    });

    controlButtons.add(threadsButton);
    threadsButton.setText(org.openide.util.NbBundle.getMessage(GControls.class, "GControls.threadsButton.text")); // NOI18N
    threadsButton.setToolTipText(org.openide.util.NbBundle.getMessage(GControls.class, "GControls.threadsButton.toolTipText")); // NOI18N
    threadsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    threadsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/billooms/gcodeoutput/icons/Threads.png"))); // NOI18N
    threadsButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/billooms/gcodeoutput/icons/Threading.png"))); // NOI18N
    threadsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    threadsButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cutThreadsAction(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(feedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(linuxCNCPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(cfPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(layout.createSequentialGroup()
            .addComponent(cutRosetteButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(cutCurveButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(threadsButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(writeGButton)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(cutCurvePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(threadPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(cutRosetteButton)
          .addComponent(cutCurveButton)
          .addComponent(threadsButton)
          .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(writeGButton)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(feedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(cfPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(linuxCNCPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(cutCurvePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(threadPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    writeGButton.addActionListener(new SaveGCode());
  }// </editor-fold>//GEN-END:initComponents

	private void cutRosetteAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutRosetteAction
      if (controls != null) {
        controls.setKind(Controls.Kind.NORMAL);
      }
	}//GEN-LAST:event_cutRosetteAction

	private void cutCurveAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutCurveAction
      if (controls != null) {
        controls.setKind(Controls.Kind.OUTLINE);
      }
	}//GEN-LAST:event_cutCurveAction

	private void cutThreadsAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutThreadsAction
      if (controls != null) {
        controls.setKind(Controls.Kind.THREADS);
      }
	}//GEN-LAST:event_cutThreadsAction

  private void writeG(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeG
    // NOTE: an actionlistener is attached to the button to do the main work
    notifyChange(false);		// reset the button to normal color
  }//GEN-LAST:event_writeG

  // Variables declaration - do not modify//GEN-BEGIN:variables
  protected com.billooms.gcodeoutput.CoarseFinePanel cfPanel;
  private javax.swing.ButtonGroup controlButtons;
  protected javax.swing.JRadioButton cutCurveButton;
  protected com.billooms.gcodeoutput.CutCurvePanel cutCurvePanel;
  protected javax.swing.JRadioButton cutRosetteButton;
  protected com.billooms.gcodeoutput.FeedRatePanel feedPanel;
  protected com.billooms.gcodeoutput.LinuxCNCPanel linuxCNCPanel;
  protected com.billooms.gcodeoutput.ThreadPanel threadPanel;
  protected javax.swing.JRadioButton threadsButton;
  private javax.swing.JButton writeGButton;
  // End of variables declaration//GEN-END:variables
}
