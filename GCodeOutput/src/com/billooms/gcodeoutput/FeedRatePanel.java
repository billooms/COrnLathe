package com.billooms.gcodeoutput;

import com.billooms.controls.FeedRate;
import java.awt.Color;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.JPanel;

/**
 * Feed rate settings for g-code
 *
 * @author Bill Ooms. Copyright 2015 Studio of Bill Ooms. All rights reserved.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
public class FeedRatePanel extends JPanel implements PropertyChangeListener {

  private final static Color ENABLED_COLOR = new Color(153, 153, 153);
  private final static Color DISABLED_COLOR = new Color(204, 204, 204);

  /** FeedRate object holds all the information. */
  private FeedRate feedRate = null;

  /** Constructs new form FeedRatePanel. */
  public FeedRatePanel() {
    initComponents();

    rpmSlider.setLabelTable(new SliderLabels(0, 100, 20, 0.0, FeedRate.MAX_RPM / 5.0));
    velSlider.setLabelTable(new SliderLabels(0, 100, 20, 0.0, FeedRate.MAX_VEL / 5.0));
    updateAll();
  }

  /**
   * Associate a new FeedRate object with this control panel.
   *
   * @param newFeedRate new FeedRate object
   */
  public void setFeedRate(FeedRate newFeedRate) {
    if (feedRate == newFeedRate) {
      return;
    }
    if (feedRate != null) {
      feedRate.removePropertyChangeListener(this);  // quit listening to the old one.
    }
    this.feedRate = newFeedRate;
    if (feedRate != null) {
      setEnabled(true);
      updateAll();
      feedRate.addPropertyChangeListener(this);     // listen for changes in the new one.
    } else {
      setEnabled(false);
    }
  }

  /**
   * Enable (or disable) input fields.
   *
   * @param en true=enable; false=disable
   */
  @Override
  public void setEnabled(boolean en) {
    rpmField.setEnabled(en);
    velField.setEnabled(en);
    rpmSlider.setEnabled(en);
    velSlider.setEnabled(en);
    if (en) {
      this.setBackground(ENABLED_COLOR);
      rpmPanel.setBackground(ENABLED_COLOR);
      velPanel.setBackground(ENABLED_COLOR);
    } else {
      this.setBackground(DISABLED_COLOR);
      rpmPanel.setBackground(DISABLED_COLOR);
      velPanel.setBackground(DISABLED_COLOR);
    }
  }

  /**
   * Get the RPM value.
   *
   * @return RPM
   */
  public double getRpm() {
    if (feedRate != null) {
      return feedRate.getRpm();
    } else {
      return FeedRate.DEFAULT_RPM;
    }
  }

  /**
   * Get the velocity (inches per minute).
   *
   * @return velocity (inches per minute)
   */
  public double getVelocity() {
    if (feedRate != null) {
      return feedRate.getVelocity();
    } else {
      return FeedRate.DEFAULT_VELOCITY;
    }
  }

  /**
   * Update all display fields with current data.
   */
  private void updateAll() {
    rpmField.setValue(getRpm());
    rpmSlider.setValue((int) (100.0 * getRpm() / FeedRate.MAX_RPM));
    velField.setValue(getVelocity());
    velSlider.setValue((int) (100.0 * getVelocity() / FeedRate.MAX_VEL));
  }

  @Override
  public void propertyChange(PropertyChangeEvent evt) {
    updateAll();
  }

  /** This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    rpmPanel = new javax.swing.JPanel();
    rpmField = new javax.swing.JFormattedTextField();
    rpmSlider = new javax.swing.JSlider();
    velPanel = new javax.swing.JPanel();
    velField = new javax.swing.JFormattedTextField();
    velSlider = new javax.swing.JSlider();

    setBorder(javax.swing.BorderFactory.createTitledBorder("Feed Rate Controls"));

    rpmPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("RPM"));

    rpmField.setColumns(4);
    rpmField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
    rpmField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    rpmField.setToolTipText("Set the spindle RPM for simple cutting");
    rpmField.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
    rpmField.setValue(FeedRate.DEFAULT_RPM);
    rpmField.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
        scrollRPM(evt);
      }
    });
    rpmField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
      public void propertyChange(java.beans.PropertyChangeEvent evt) {
        changeRPM(evt);
      }
    });

    rpmSlider.setMajorTickSpacing(10);
    rpmSlider.setPaintLabels(true);
    rpmSlider.setPaintTicks(true);
    rpmSlider.setToolTipText("Set the spindle RPM for simple cutting");
    rpmSlider.setValue(30);
    rpmSlider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        slideRPM(evt);
      }
    });

    javax.swing.GroupLayout rpmPanelLayout = new javax.swing.GroupLayout(rpmPanel);
    rpmPanel.setLayout(rpmPanelLayout);
    rpmPanelLayout.setHorizontalGroup(
      rpmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(rpmPanelLayout.createSequentialGroup()
        .addComponent(rpmField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(rpmSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    );
    rpmPanelLayout.setVerticalGroup(
      rpmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(rpmField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
      .addComponent(rpmSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
    );

    velPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Velocity (in/min)"));

    velField.setColumns(4);
    velField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.0"))));
    velField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    velField.setToolTipText("Set the velocity (inches/minute) on velocity limited cuts");
    velField.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
    velField.setValue(FeedRate.DEFAULT_VELOCITY);
    velField.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
        scrollVelocity(evt);
      }
    });
    velField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
      public void propertyChange(java.beans.PropertyChangeEvent evt) {
        changeVel(evt);
      }
    });

    velSlider.setMajorTickSpacing(10);
    velSlider.setPaintLabels(true);
    velSlider.setPaintTicks(true);
    velSlider.setToolTipText("Set the velocity (inches/minute) on velocity limited cuts");
    velSlider.setValue(20);
    velSlider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        slideVel(evt);
      }
    });

    javax.swing.GroupLayout velPanelLayout = new javax.swing.GroupLayout(velPanel);
    velPanel.setLayout(velPanelLayout);
    velPanelLayout.setHorizontalGroup(
      velPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(velPanelLayout.createSequentialGroup()
        .addComponent(velField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(velSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    );
    velPanelLayout.setVerticalGroup(
      velPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(velField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
      .addComponent(velSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(rpmPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
      .addComponent(velPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(rpmPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(velPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    );
  }// </editor-fold>//GEN-END:initComponents

	private void slideRPM(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slideRPM
      if (rpmSlider.isFocusOwner() && (feedRate != null)) {
        feedRate.setRpm((double) rpmSlider.getValue() / 100.0 * FeedRate.MAX_RPM);
      }
	}//GEN-LAST:event_slideRPM

	private void slideVel(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slideVel
      if (velSlider.isFocusOwner() && (feedRate != null)) {
        feedRate.setVelocity((double) velSlider.getValue() / 100.0 * FeedRate.MAX_VEL);
      }
	}//GEN-LAST:event_slideVel

	private void changeVel(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_changeVel
      if (velField.isFocusOwner() && (feedRate != null)) {
        feedRate.setVelocity(((Number) velField.getValue()).doubleValue());
      }
	}//GEN-LAST:event_changeVel

	private void changeRPM(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_changeRPM
      if (rpmField.isFocusOwner() && (feedRate != null)) {
        feedRate.setRpm(((Number) rpmField.getValue()).doubleValue());
      }
	}//GEN-LAST:event_changeRPM

  private void scrollRPM(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_scrollRPM
    if (rpmField.isFocusOwner() && (feedRate != null)) {
      feedRate.setRpm(((Number) rpmField.getValue()).doubleValue() + 0.1 * evt.getWheelRotation());
    }
  }//GEN-LAST:event_scrollRPM

  private void scrollVelocity(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_scrollVelocity
    if (velField.isFocusOwner() && (feedRate != null)) {
      feedRate.setVelocity(((Number) velField.getValue()).doubleValue() + 0.1 * evt.getWheelRotation());
    }
  }//GEN-LAST:event_scrollVelocity

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JFormattedTextField rpmField;
  private javax.swing.JPanel rpmPanel;
  private javax.swing.JSlider rpmSlider;
  private javax.swing.JFormattedTextField velField;
  private javax.swing.JPanel velPanel;
  private javax.swing.JSlider velSlider;
  // End of variables declaration//GEN-END:variables

}
