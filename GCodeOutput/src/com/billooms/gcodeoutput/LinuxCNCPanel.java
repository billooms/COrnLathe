package com.billooms.gcodeoutput;

import com.billooms.gcodeoutput.hardwareprefs.HardwarePrefs;
import com.billooms.outlineeditor.OutlineEditorTopComponent;
import java.awt.Color;
import java.awt.geom.Point2D;
import java.text.DecimalFormat;
import javafx.geometry.Point3D;
import javax.swing.JPanel;
import org.openide.util.Lookup;
import org.openide.windows.WindowManager;

/**
 * Panel for connecting to LinuxCNC.
 *
 * @author Bill Ooms. Copyright 2015 Studio of Bill Ooms. All rights reserved.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
public class LinuxCNCPanel extends JPanel {

  private final static Color ENABLED_COLOR = new Color(153, 153, 153);
  private final static Color DISABLED_COLOR = new Color(204, 204, 204);
  private final static DecimalFormat F4 = new DecimalFormat("0.0000");
  private final static DecimalFormat F2 = new DecimalFormat("0.00");

  /** Outline Editor. */
  private OutlineEditorTopComponent outlineEdit;
  /** Hardware preferences. */
  private final HardwarePrefs hardwarePrefs = Lookup.getDefault().lookup(HardwarePrefs.class);
  /** Connection to LinuxCNC. */
  private LinuxCNCConnection connection;

  /**
   * Creates new form LinuxCNCPanel.
   */
  public LinuxCNCPanel() {
    initComponents();

//	initialize();	// Having the Lookup in updateAll() prevents
//                     this from being a JavaBean Component for some reason.
  }

  /**
   * Initialize a connection to LinuxCNC.
   */
  public void initialize() {
    String ipAddress = "";
    if (hardwarePrefs.connectLinuxCNC()) {
      ipAddress = hardwarePrefs.linuxCNCIP();
    }
    connection = new LinuxCNCConnection(ipAddress);
    this.setEnabled(connection.isConnected());
    outlineEdit = (OutlineEditorTopComponent) WindowManager.getDefault().findTopComponent("OutlineEditorTopComponent");
  }

  /**
   * Close the connection to LinuxCNC.
   */
  public void close() {
    connection.close();
    connectLabel.setForeground(Color.RED);
    connectLabel.setText("Not Connected");
    probeButton.setEnabled(false);
    this.setEnabled(false);
  }

  /**
   * Enable (or disable) input fields.
   *
   * @param en true=enable; false=disable
   */
  @Override
  public void setEnabled(boolean en) {
    probeButton.setEnabled(en);
    if (en) {
      this.setBackground(ENABLED_COLOR);
      connectLabel.setForeground(Color.GREEN);
      connectLabel.setText("Connected");
    } else {
      this.setBackground(DISABLED_COLOR);
      connectLabel.setForeground(Color.RED);
      connectLabel.setText("Not connected");
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    connectLabel = new javax.swing.JLabel();
    probeButton = new javax.swing.JButton();
    dataLabel = new javax.swing.JLabel();

    setBorder(javax.swing.BorderFactory.createTitledBorder("LinuxCNC Connection")); // NOI18N

    connectLabel.setText("Not Connected");

    probeButton.setText("Probe");
    probeButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        probe(evt);
      }
    });

    dataLabel.setText("No probe data");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(connectLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(probeButton))
          .addGroup(layout.createSequentialGroup()
            .addComponent(dataLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(probeButton)
      .addGroup(layout.createSequentialGroup()
        .addComponent(connectLabel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(dataLabel))
    );
  }// </editor-fold>//GEN-END:initComponents

	private void probe(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_probe
      Point3D pt = connection.getPosition();
      dataLabel.setText("X:" + F4.format(pt.getX()) + "  Z:" + F4.format(pt.getY()) + "  C:" + F2.format(pt.getZ()));
      outlineEdit.probePt(new Point2D.Double(pt.getX(), pt.getY()));
	}//GEN-LAST:event_probe

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel connectLabel;
  private javax.swing.JLabel dataLabel;
  private javax.swing.JButton probeButton;
  // End of variables declaration//GEN-END:variables
}
